{"version":3,"file":"static/iframe.3a9bbf1e0500f62a2aa8.bundle.js","sources":["webpack:///./src/components/Tooltip.tsx"],"sourcesContent":["/*\n    To use this component, place <Tooltip> in the render of any component.\n    To prevent cutoffs in elements with `overflow:hidden`, tooltip is rendered `position:fixed`.\n    So, tooltip\"s position is calculated based on parentElement\"s.\n    This means that tooltip\"s position will be relative to position and width/height of its ~immediate parent~.\n\n    This is important for 2 reasons:\n    1. Make sure parentElement\"s width/height matches the actual size of the entire parent component.\n    2. Known Chromium bug: parent with `transform:translate` will mess up positioning of fixed-position children.\n\n    See <Avatar> for example use.\n*/\n\nimport React, { Component } from 'react';\nimport { action, observable } from 'mobx';\nimport { observer } from 'mobx-react';\n\nimport css from 'classnames';\nimport { getPositionInWindow } from './helpers/dom';\n\nexport interface TooltipProps {\n  className?: string;\n  text?: string;\n\n  // If empty, will default to \"top\"\n  position?: 'top' | 'right' | 'bottom' | 'left';\n\n  // Default max-width is 162px; \"small\" sets max-width to 64px\n  size?: 'small';\n}\n\n@observer\nexport class Tooltip extends Component<TooltipProps> {\n  @observable\n  ref = undefined as any; // TODO: another ref placeholder\n\n  @observable\n  isVisible = false;\n  @observable\n  style = {\n    left: '',\n    top: ''\n  };\n\n  @action.bound\n  setRef(ref: HTMLDivElement): void {\n    if (ref) {\n      this.ref = ref;\n\n      if (!ref.parentElement) return;\n      ref.parentElement.addEventListener('mouseenter', this.showTooltip, false);\n      ref.parentElement.addEventListener('mouseleave', this.hideTooltip, false);\n      ref.parentElement.addEventListener('click', this.hideTooltip, false);\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.ref || !this.ref.parentElement) return;\n\n    this.ref.parentElement.removeEventListener('mouseenter', this.showTooltip);\n    this.ref.parentElement.removeEventListener('mouseleave', this.hideTooltip);\n    this.ref.parentElement.removeEventListener('click', this.hideTooltip);\n  }\n\n  @action.bound\n  showTooltip() {\n    if (!this.ref) return;\n\n    const tooltipParent = this.ref.parentElement as HTMLElement;\n    const { width, height } = this.ref.getBoundingClientRect();\n    const { offsetX, offsetY, posX, posY } = getPositionInWindow(tooltipParent);\n    const margin = 5;\n\n    switch (this.props.position) {\n      default:\n      case 'top':\n        this.style.left = `${posX - width / 2}px`;\n        this.style.top = `${posY - offsetY - height - margin}px`;\n        break;\n      case 'bottom':\n        this.style.left = `${posX - width / 2}px`;\n        this.style.top = `${posY + offsetY + margin}px`;\n        break;\n      case 'left':\n        this.style.left = `${posX - offsetX - width - margin}px`;\n        this.style.top = `${posY - height / 2}px`;\n        break;\n      case 'right':\n        this.style.left = `${posX + offsetX + margin}px`;\n        this.style.top = `${posY - height / 2}px`;\n        break;\n    }\n    this.isVisible = true;\n  }\n\n  @action.bound\n  hideTooltip() {\n    this.isVisible = false;\n  }\n\n  render() {\n    return (\n      <div\n        ref={this.setRef}\n        className={css('p-tooltip', this.props.className, this.props.size)}\n        style={\n          this.isVisible\n            ? this.style\n            : {\n                /*\n                            Need to move hidden tooltip to top-left in order to calculate width/height correctly.\n                            (Tooltip near right/bottom of screen may get cut off, which affects calculated bounding box)\n                        */\n                left: 0,\n                top: 0,\n                visibility: 'hidden'\n              }\n        }\n      >\n        {this.props.text}\n      </div>\n    );\n  }\n}\ntry {\n    // @ts-ignore\n    Tooltip.displayName = \"Tooltip\";\n    // @ts-ignore\n    Tooltip.__docgenInfo = { \"description\": \"\", \"displayName\": \"Tooltip\", \"props\": { \"className\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"text\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"text\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"position\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"position\", \"required\": false, \"type\": { \"name\": \"\\\"top\\\" | \\\"right\\\" | \\\"bottom\\\" | \\\"left\\\"\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\"\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Tooltip.tsx#Tooltip\"] = { docgenInfo: Tooltip.__docgenInfo, name: \"Tooltip\", path: \"src/components/Tooltip.tsx#Tooltip\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAgCA","sourceRoot":""}